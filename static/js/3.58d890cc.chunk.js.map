{"version":3,"sources":["components/Banner.tsx","components/Cover.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","pages/ErrorPage.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator/index.js","../node_modules/regenerator-runtime/runtime.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","services/useCovidStats.ts","components/CovidStats.tsx","pages/Covid19Stats.tsx"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","Banner","props","className","title","subtitle","children","react__WEBPACK_IMPORTED_MODULE_0___default","n","Cover","coverClass","a","createElement","defaultProps","_arrayWithHoles","arr","Array","isArray","d","__webpack_exports__","_nonIterableRest","TypeError","r","_components_Cover__WEBPACK_IMPORTED_MODULE_1__","_components_Banner__WEBPACK_IMPORTED_MODULE_2__","react_router_dom__WEBPACK_IMPORTED_MODULE_3__","ErrorPage","to","module","exports","runtime","undefined","Op","Object","prototype","hasOwn","hasOwnProperty","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","_invoke","state","GenStateSuspendedStart","method","arg","GenStateExecuting","Error","GenStateCompleted","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","type","done","GenStateSuspendedYield","value","makeInvokeMethod","fn","obj","call","err","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","result","__await","then","unwrapped","error","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","constructor","displayName","isGeneratorFunction","genFun","ctor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","toString","keys","object","key","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","regeneratorRuntime","accidentalStrictMode","Function","asyncGeneratorStep","gen","_next","_throw","_slicedToArray","arrayWithHoles","_arr","_n","_d","_e","_s","_i","_iterableToArrayLimit","unsupportedIterableToArray","nonIterableRest","useStats","url","_useState2","useState","stats","setStats","_useState4","loading","setLoading","_useState6","setError","useEffect","_fetchData","regenerator_default","_callee","data","_context","console","log","fetch","res","json","args","arguments","apply","fetchData","StatGrid","styled","div","_templateObject","StatBlock","_templateObject2","color","Stats","_ref","_useStats","react_default","Fragment","confirmed","deaths","recovered","Covid19Stats","CovidStats"],"mappings":"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","file":"static/js/3.58d890cc.chunk.js","sourcesContent":["import * as React from 'react';\r\n\r\nexport interface BannerProps {\r\n    subtitle?: string;\r\n    title: string;\r\n    children: JSX.Element;\r\n}\r\n\r\nconst Banner = (props: BannerProps): JSX.Element => (\r\n    <div className=\"banner\">\r\n        <h1>{props.title}</h1>\r\n        <div></div>\r\n        <p>{props.subtitle}</p>\r\n        {props.children}\r\n    </div>\r\n);\r\nexport default Banner;\r\n","import React from 'react';\r\n\r\ninterface CoverProps {\r\n    coverClass?: string;\r\n}\r\n\r\nconst Cover: React.FC<CoverProps> = (props) => {\r\n    const { coverClass, children } = props;\r\n    return (\r\n        <header className={coverClass}>\r\n            {children}\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Cover;\r\n\r\nCover.defaultProps = {\r\n    coverClass: \"defaultHero\"\r\n};","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React from 'react';\r\nimport Cover from '../components/Cover';\r\nimport Banner from '../components/Banner';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst ErrorPage: React.FC = () => {\r\n    return (\r\n        <Cover>\r\n            <Banner \r\n            title=\"404\"\r\n            subtitle=\"page not found\"\r\n            >\r\n            <Link to=\"/\" className=\"btn-primary\">return home</Link>\r\n            </Banner>\r\n        </Cover>\r\n    )\r\n}\r\n\r\nexport default ErrorPage\r\n","module.exports = require(\"regenerator-runtime\");\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar runtime = function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n    return generator;\n  }\n\n  exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n\n  function tryCatch(fn, obj, arg) {\n    try {\n      return {\n        type: \"normal\",\n        arg: fn.call(obj, arg)\n      };\n    } catch (err) {\n      return {\n        type: \"throw\",\n        arg: err\n      };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\"; // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n\n  var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n\n  function Generator() {}\n\n  function GeneratorFunction() {}\n\n  function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n\n\n  var IteratorPrototype = {};\n\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n\n  if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = \"GeneratorFunction\"; // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function (method) {\n      prototype[method] = function (arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  exports.isGeneratorFunction = function (genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can\n    // do is to check its .name property.\n    (ctor.displayName || ctor.name) === \"GeneratorFunction\" : false;\n  };\n\n  exports.mark = function (genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  }; // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n\n\n  exports.awrap = function (arg) {\n    return {\n      __await: arg\n    };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n\n        if (value && typeof value === \"object\" && hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function (value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function (err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function (unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function (error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function (resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise = // If enqueue has been called before, then we want to wait until\n      // all previous Promises have been resolved before calling invoke,\n      // so that results are always delivered in the correct order. If\n      // enqueue has not been called before, then it is important to\n      // call invoke immediately, without waiting on a callback to fire,\n      // so that the async generator function has the opportunity to do\n      // any necessary setup in a predictable way. This predictability\n      // is why the Promise constructor synchronously invokes its\n      // executor callback, and why async functions synchronously\n      // execute code before the first await. Since we implement simple\n      // async functions in terms of async generators, it is especially\n      // important to get this right, even though it requires care.\n      previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later\n      // invocations of the iterator.\n      callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n    } // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n\n\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n\n  exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n\n  exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);\n    return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.\n    : iter.next().then(function (result) {\n      return result.done ? result.value : iter.next();\n    });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        } // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n\n\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n        var record = tryCatch(innerFn, self, context);\n\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done ? GenStateCompleted : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted; // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  } // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n\n\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (!info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).\n\n      context.next = delegate.nextLoc; // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    } // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n\n\n    context.delegate = null;\n    return ContinueSentinel;\n  } // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n\n\n  defineIteratorMethods(Gp);\n  Gp[toStringTagSymbol] = \"Generator\"; // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n\n  Gp[iteratorSymbol] = function () {\n    return this;\n  };\n\n  Gp.toString = function () {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = {\n      tryLoc: locs[0]\n    };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{\n      tryLoc: \"root\"\n    }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function (object) {\n    var keys = [];\n\n    for (var key in object) {\n      keys.push(key);\n    }\n\n    keys.reverse(); // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      } // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n\n\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1,\n            next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n          return next;\n        };\n\n        return next.next = next;\n      }\n    } // Return an iterator with no values.\n\n\n    return {\n      next: doneResult\n    };\n  }\n\n  exports.values = values;\n\n  function doneResult() {\n    return {\n      value: undefined,\n      done: true\n    };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n    reset: function reset(skipTempReset) {\n      this.prev = 0;\n      this.next = 0; // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n      this.method = \"next\";\n      this.arg = undefined;\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n    stop: function stop() {\n      this.done = true;\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n    dispatchException: function dispatchException(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !!caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n    abrupt: function abrupt(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry && (type === \"break\" || type === \"continue\") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n    complete: function complete(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" || record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n    finish: function finish(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n    \"catch\": function _catch(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n\n          return thrown;\n        }\n      } // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n\n\n      throw new Error(\"illegal catch attempt\");\n    },\n    delegateYield: function delegateYield(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  }; // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n\n  return exports;\n}( // If this script is executing as a CommonJS module, use module.exports\n// as the regeneratorRuntime namespace. Otherwise create a new empty\n// object. Either way, the resulting object will be used to initialize\n// the regeneratorRuntime variable at the top of this file.\ntypeof module === \"object\" ? module.exports : {});\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","import { useState, useEffect } from 'react';\r\n\r\nconst useStats = (url: string) => {\r\n    const [stats, setStats] = useState();\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState();\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n          setLoading(true);\r\n          setError(null);\r\n          console.log('Fetching Data');\r\n          const data = await fetch(url)\r\n            .then(res => res.json())\r\n            .catch(err => {\r\n              setError(err);\r\n            });\r\n          setStats(data);\r\n          setLoading(false);\r\n        }\r\n        fetchData();\r\n      }, [url]);\r\n      return {\r\n        stats,\r\n        loading,\r\n        error,\r\n      };\r\n};\r\n\r\nexport default useStats;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport useStats from '../services/useCovidStats';\r\nimport ErrorPage from '../pages/ErrorPage';\r\n\r\nconst StatGrid = styled.div`\r\n  padding-top: 100px;\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  grid-gap: 1rem;\r\n  @media screen and (max-width: 576px) {\r\n    display: block;\r\n    margin-top: 100px;\r\n  }\r\n`;\r\nconst StatBlock = styled.div`\r\n  background: #f2f2f2;\r\n  font-size: 2rem;\r\n  padding: 2rem;\r\n  border-radius: 2rem;\r\n  display: grid;\r\n  align-items: center;\r\n  justify-items: center;\r\n  text-align: center;\r\n  border: 3px solid ${(props) => props.color};\r\n`;\r\n\r\ninterface CovidProps {\r\n    url: string;\r\n}\r\n\r\nconst Stats: React.FC<CovidProps> = ({ url }) => {\r\n  const { stats, loading, error } = useStats(url);\r\n  if (loading) return <p>Loading...</p>;\r\n  if (error) return <ErrorPage/>;\r\n \r\n  return (\r\n    <>\r\n    <StatGrid>\r\n      <StatBlock color=\"blue\">\r\n        <h3>Confirmed:</h3>\r\n        <span>{stats.confirmed.value}</span>\r\n      </StatBlock>\r\n      <StatBlock color=\"red\">\r\n        <h3>Deaths:</h3>\r\n        <span>{stats.deaths.value}</span>\r\n      </StatBlock>\r\n      <StatBlock color=\"green\">\r\n        <h3>Recovered:</h3>\r\n        <span>{stats.recovered.value}</span>\r\n      </StatBlock>\r\n    </StatGrid>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Stats;","import React from 'react';\r\nimport Stats from '../components/CovidStats';\r\n\r\nconst Covid19Stats: React.FC = () => {\r\n    return (\r\n        <React.Fragment>\r\n            <Stats url=\"https://covid19.mathdro.id/api\"></Stats>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Covid19Stats;\r\n"],"sourceRoot":""}